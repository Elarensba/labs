import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split  
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
from scipy.stats import pearsonr
import streamlit as st
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="–õ–∏–Ω–µ–π–Ω–∞—è –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –ú–æ–¥–µ–ª—å (–õ–ú–§–ú)",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.markdown(
    """
    <style>
    .stApp {
        background-color: #f0f8ff;  /* –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω */
    }
    .stHeader {
        color: #0077b6;  /* –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    }
    .stMetric {
        background-color: #e0f7fa;  /* –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
        border-radius: 10px;
        padding: 10px;
    }
    .stButton>button {
        background-color: #0077b6;  /* –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
        color: white;
        border-radius: 5px;
    }
    .stDataFrame {
        background-color: #ffffff;  /* –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü */
        border-radius: 10px;
        padding: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    return pd.read_excel(file_path)

def preprocess_data(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏"""
    data = data.dropna()
    return data

def build_model(X, y):
    """–û—Ü–µ–Ω–∫–∞ –ª–∏–Ω–µ–π–Ω–æ–π –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ (–õ–ú–§–ú)"""
    X = sm.add_constant(X)
    model = sm.OLS(y, X).fit()
    return model

def evaluate_model(model, X_test, y_test):
    """–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: R^2, RMSE"""
    y_pred = model.predict(sm.add_constant(X_test))
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    return r2, rmse, y_pred

def get_statistical_info(X, y):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö"""
    stats = []
    for col in X.columns:
        corr, pval = pearsonr(X[col], y)
        stats.append({"Factor": col, "Correlation with y": corr, "p-value:": pval})
    corr = X.corr()
    corr.columns = X.columns.copy()
    corr.index = X.columns.copy()
    return pd.DataFrame(stats), corr

def plot_results(y_train, y_train_pred, y_test, y_test_pred):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(y_train.index, y_train, label="Actual (Train)", color="#0077b6")  # –°–∏–Ω–∏–π
    ax.plot(
        y_train.index,
        y_train_pred,
        label="Predicted (Train)",
        linestyle="--",
        color="#00b4d8",  # –ì–æ–ª—É–±–æ–π
    )
    ax.plot(y_test.index, y_test, label="Actual (Test)", color="#005f73")  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
    ax.plot(
        y_test.index, y_test_pred, label="Predicted (Test)", linestyle="--", color="#90e0ef"  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
    )
    ax.set_title("Model Predictions vs Actual", color="#0077b6")
    ax.legend()
    return fig

st.title("–õ–∏–Ω–µ–π–Ω–∞—è –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –ú–æ–¥–µ–ª—å (–õ–ú–§–ú)")

st.sidebar.header("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö", type=["xlsx"])

if uploaded_file:
    data = load_data(uploaded_file)
    st.write("### –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(data)

    st.sidebar.header("–®–∞–≥ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    target_column = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –æ—Ç–∫–ª–∏–∫–∞ (y)", data.columns)
    feature_columns = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (X)",
        [col for col in data.columns if col != target_column],
    )
    if data is not None:
        test_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0, data.shape[0], 5, 5)

    if target_column and feature_columns:
        data = data.sort_values("date", ascending=True)
        X = data[feature_columns]
        y = data[target_column]

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X_test = X.loc[X.shape[0] - test_size :, :]
        X_train = X.loc[: X.shape[0] - test_size, :]
        y_test = y.loc[X.shape[0] - test_size :]
        y_train = y.loc[: X.shape[0] - test_size]

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_df, corr = get_statistical_info(X_train, y_train)
        st.write("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
        st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–∞—Ä–≥–µ—Ç–æ–º")
        st.dataframe(stats_df)
        st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        st.dataframe(corr)

        # –í—ã–±–æ—Ä –ª–∞–≥–æ–≤
        lags = {}
        for column in feature_columns:
            lags[column] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {column}", [0, 1, 2, 3], 0)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ª–∞–≥–æ–≤
        for col, lag in lags.items():
            if lag > 0:
                for sub_lag in range(1, lag + 1):
                    X_train[f"{col}_lag_{sub_lag}"] = X_train[col].diff(sub_lag)
                    X_test[f"{col}_lag_{sub_lag}"] = X_test[col].diff(sub_lag)
                    feature_columns.append(f"{col}_lag_{sub_lag}")

        max_lag = max(lags.values())
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        st.write("### –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
        st.write(feature_columns)

        # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥–æ–≤ –∏–∑ —Ä—è–¥–∞ –æ—Ç–∫–ª–∏–∫–∞
        st.sidebar.header("–®–∞–≥ 3: –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥–æ–≤")
        start_index = st.sidebar.slider("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–¥—Ä—è–¥–∞", 0, len(y_train) - 1, 0)
        end_index = st.sidebar.slider("–ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–¥—Ä—è–¥–∞", start_index + 1, len(y_train), len(y_train))

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        X_train_final = X_train.loc[start_index + max_lag:end_index, feature_columns]
        y_train_final = y_train.loc[start_index + max_lag:end_index]
        X_test_final = X_test.loc[X.shape[0] - test_size + max_lag :, feature_columns]
        y_test_final = y_test.loc[X.shape[0] - test_size + max_lag :]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = build_model(X_train_final, y_train_final)
        st.write("### –ò—Ç–æ–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        st.code(model.summary())

        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        r2, rmse, y_test_pred = evaluate_model(model, X_test_final, y_test_final)
        y_train_pred = model.predict(sm.add_constant(X_train_final))

        st.write("### –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        st.metric("R^2", f"{r2:.2f}")
        st.metric("RMSE", f"{rmse:.2f}")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        st.write("### –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        fig = plot_results(y_train_final, y_train_pred, y_test_final, y_test_pred)
        st.pyplot(fig)

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        st.write("### –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
        st.write("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
        user_input = {}
        for col in feature_columns:
            user_input[col] = st.number_input(f"{col}", value=0.0)

        if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
            user_data = pd.DataFrame([user_input])
            user_data["const"] = 1
            user_data = user_data[["const"] + list(user_data.columns)[:-1]]
            prediction = model.predict(user_data)[0]
            st.write(f"**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ (y): {prediction:.2f}**")
